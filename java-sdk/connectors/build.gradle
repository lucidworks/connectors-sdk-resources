ext.connectorprojects = subprojects - project("shared-lib")

subprojects {

  apply plugin: 'java'
  apply plugin: 'idea'

  // Folder where the plugins are built
  ext.pluginsDir = "${rootProject.buildDir}/plugins"

  configurations {
    provided
    compile.extendsFrom(provided)
    remoteConnector
  }

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url "https://artifactory.lucidworks.com/artifactory/public-artifacts/"
    }

    repositories {
      def pluginsLucidworks =  ivy {
        url 'https://plugins.lucidworks.com/'

        patternLayout {
          artifact '/[organisation]/5.3/[module]-[revision].[ext]'
          artifact '/[organisation]/5.4/[module]-[revision].[ext]'
        }

        metadataSources { artifact() }
      }
      exclusiveContent {
        forRepositories(pluginsLucidworks)
        filter { includeGroup("remote-connector") }
      }
    }
  }

  dependencies {
    provided("com.lucidworks-connector.sdk:connector-plugin-sdk:${connectorsSDKVersion}")
    provided "org.slf4j:slf4j-api:${slf4jVersion}"
    testCompile 'junit:junit:4.12'
    remoteConnector "remote-connector:connector-plugin-standalone:${fusionVersion}"
  }
}

configure(connectorprojects) { p ->

  jar {
    baseName = "${project.name}"
  }

  task plugin(type: Jar) {
    archiveName = "${project.name}" + ".zip"
    manifest {
      attributes 'Plugin-Class': "${pluginClass}",
          'Plugin-Type': "connector",
          'Plugin-Id': "${pluginId}",
          'Plugin-Version': "${version}",
          'Plugin-Provider': "${pluginProvider}",
          'Plugin-Connectors-SDK-Version': "${connectorsSDKVersion}"
    }
    into('lib') {
      from configurations.compile - configurations.provided
      // Copy the plugin
      from jar
    }
    extension('zip')
  }

  task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
  }

  task deploy(type: Exec, dependsOn: ["assemblePlugin"]) {
    def service = "${restService}"
    if (!service.endsWith("/")) {
      service += "/"
    }
    service += "plugins"
    commandLine "curl",
        "-m ${maxTimeout}",
        "-u",
        "${userPass}",
        "-X",
        "PUT",
        "-H",
        "content-type:application/zip",
        "${service}",
        "--data-binary",
        "@${pluginsDir}/${plugin.outputs.files.singleFile.getName()}"
    doLast {
      logger.info("Curl result: ${standardOutput.toString().trim()}")
    }
  }

  task connect(type: JavaExec, dependsOn: assemblePlugin) {
    main = 'com.lucidworks.connectors.ConnectorPluginStandaloneApp'
    classpath = configurations.remoteConnector
    File configYamlFile = file("${configYamlPath}")
    String zipFile = "" + project.buildDir + "/libs/" + project.name + ".zip"
    jvmArgs "-Dplugin.path=${zipFile}"
    args configYamlFile.path
    doFirst {
      println " >> Using plugin zip from: ${zipFile}"
      println " >> Using the config file from: ${configYamlFile.path}"
    }
  }
}

// Assemble all the plugins
task assemblePlugins(type: Copy) {
  dependsOn connectorprojects.assemblePlugin
}

// Deploy all plugins
// ./gradlew deployPlugins -PrestService=https://<fusion-proxy>/connectors -PuserPass=<user>:<password>
task deployPlugins {
  dependsOn connectorprojects.deploy
}